library(foreign) # Package needed for the write.dta() function
ls(IQM_pro_data)
write.dta(IQM_pro_data, "~/Dropbox/Studieophold/College_of_Europe/Master_Thesis/Data/IQM_pro_data.dta", version=10)
write.csv(IQM_pro_data, "~/Dropbox/Studieophold/College_of_Europe/Master_Thesis/Data/thesis_data.csv")
# # This command runs the Stata do file in the specified folder
# system("PATH=$PATH:/Applications/Stata/Stata.app/Contents/MacOS/:. ; Stata -e do /Users/vrangbaek/Dropbox/Studieophold/College_of_Europe/Master_Thesis/CoE_thesis_repository/Master_thesis.do") # It is needed to calculate the growth rate
# Read Stata data
# Statadata <- read.dta("/Users/vrangbaek/Dropbox/Studieophold/College_of_Europe/Master_Thesis/Data/Statadata.dta")
# ls(Statadata)
# head(Statadata)
# # Remove unnecessary variables
# Statadata <- Statadata[c("CTRYNM", "Year", "gdpgrowth")]
# # Merge Statadata with main dataset
# IQM_pro_data <- merge(Statadata, IQM_pro_data, by.x=c("CTRYNM", "Year"), by.y=c("CTRYNM", "Year"))
ls(IQM_pro_data)
## @knitr analysis
#### Analysis ####
# install.packages("plm")
library(plm) # Package for panel data model, see Croissant and Millo (2008)
# Pooled regression
summary(pooled1 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + llaw.order,
data = IQM_pro_data,
model = "pooling"))
summary(pooled2 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + democ + democ2,
data = IQM_pro_data,
model = "pooling"))
summary(pooled3 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONIII,
data = IQM_pro_data,
model = "pooling"))
summary(pooled4 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONV,
data = IQM_pro_data,
model = "pooling"))
summary(pooled5 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONVJ,
data = IQM_pro_data,
model = "pooling"))
summary(pooled6 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + l.icrgQoG,
data = IQM_pro_data,
model = "pooling"))
# GLS
summary(GLS1 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + llaw.order,
data = IQM_pro_data,
model = "pooling"))
summary(GLS2 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + democ + democ2,
data = IQM_pro_data,
model = "pooling"))
summary(GLS3 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONIII,
data = IQM_pro_data,
model = "pooling"))
summary(GLS4 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONV,
data = IQM_pro_data,
model = "pooling"))
summary(GLS5 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONVJ,
data = IQM_pro_data,
model = "pooling"))
summary(GLS6 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + l.icrgQoG,
data = IQM_pro_data,
model = "pooling"))
# # Fixed effects, individual effects
# summary(fixed_effects1 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "within"))
# summary(fixed_effects2 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONIII + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within"))
# summary(fixed_effects3 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONVJ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within"))
# summary(fixed_effects4 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + democ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within"))
# summary(fixed_effects5 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + llaw.order, data = IQM_pro_data, model = "within"))
# summary(fixed_effects6 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + l.icrgQoG, data = IQM_pro_data, model = "within"))
#
# # Fixed effects, twoways
# summary(fixed_effects1a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects2a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONIII + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects3a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONVJ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects4a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + democ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects5a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + llaw.order, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects6a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + l.icrgQoG, data = IQM_pro_data, model = "within", effect = "twoways"))
#
# # Fixed effects, time effects
# summary(fixed_effects1b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects2b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONIII + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects3b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONVJ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects4b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + democ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects5b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + llaw.order, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects6b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + l.icrgQoG, data = IQM_pro_data, model = "within", effect = "time"))
# Random effects
# summary(random_effects1 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "random"))
library(estout)
## @knitr analysis2
# eststo(fixed_effects1)
# eststo(fixed_effects2)
# eststo(fixed_effects3)
# eststo(fixed_effects4)
# eststo(fixed_effects5)
# eststo(fixed_effects6)
# esttab(label = "fe3", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from fixed effects estimation (individual effects)", caption.top=FALSE, table.pos="p", texfontsize="\\small")
# estclear()
# # Fixed effects, twoways
# eststo(fixed_effects1a)
# eststo(fixed_effects2a)
# eststo(fixed_effects3a)
# eststo(fixed_effects4a)
# eststo(fixed_effects5a)
# eststo(fixed_effects6a)
# esttab(label = "fe4", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from fixed effects estimation (individual and time effects)", caption.top=FALSE, table.pos="p", texfontsize="\\small")
# estclear()
# # FE, Time effects
# eststo(fixed_effects1b)
# eststo(fixed_effects2b)
# eststo(fixed_effects3b)
# eststo(fixed_effects4b)
# eststo(fixed_effects5b)
# eststo(fixed_effects6b)
# esttab(label = "fe5", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from fixed effects estimation (time effects)", caption.top=FALSE, table.pos="p", texfontsize="\\small")
# estclear()
# Pooled
eststo(pooled1)
eststo(pooled2)
eststo(pooled3)
eststo(pooled4)
eststo(pooled5)
eststo(pooled6)
esttab(label = "fe6", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from pooled regression", caption.top=FALSE, table.pos="p", texfontsize="\\small")
estclear()
# GLS
eststo(GLS1)
eststo(GLS2)
eststo(GLS3)
eststo(GLS4)
eststo(GLS5)
eststo(GLS6)
esttab(label = "GLS", colnumber=TRUE, var.rename=NULL,
table="sidewaystable",
caption = "Estimation results from GLS regression",
caption.top=FALSE, table.pos="p", texfontsize="\\small")
estclear()
summary(GLS6 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + l.icrgQoG,
data = IQM_pro_data,
model = "pooling"))
# GLS
eststo(GLS1)
eststo(GLS2)
eststo(GLS3)
eststo(GLS4)
eststo(GLS5)
eststo(GLS6)
esttab(label = "GLS", colnumber=TRUE, var.rename=NULL,
table="sidewaystable",
caption = "Estimation results from GLS regression",
caption.top=FALSE, table.pos="p", texfontsize="\\small")
estclear()
fix(GLS1)
fix(pooled01)
esttab(label = "GLS", colnumber=TRUE, var.rename=NULL,
table="sidewaystable",
caption = "Estimation results from GLS regression",
caption.top=FALSE, table.pos="p", texfontsize="\\small")
# Pooled regression
summary(pooled1 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + llaw.order,
data = IQM_pro_data,
model = "pooling"))
summary(pooled2 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + democ + democ2,
data = IQM_pro_data,
model = "pooling"))
summary(pooled3 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONIII,
data = IQM_pro_data,
model = "pooling"))
summary(pooled4 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONV,
data = IQM_pro_data,
model = "pooling"))
summary(pooled5 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONVJ,
data = IQM_pro_data,
model = "pooling"))
summary(pooled6 <- plm(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + l.icrgQoG,
data = IQM_pro_data,
model = "pooling"))
# GLS
summary(GLS1 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + llaw.order,
data = IQM_pro_data,
model = "pooling"))
summary(GLS2 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + democ + democ2,
data = IQM_pro_data,
model = "pooling"))
summary(GLS3 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONIII,
data = IQM_pro_data,
model = "pooling"))
summary(GLS4 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONV,
data = IQM_pro_data,
model = "pooling"))
summary(GLS5 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + POLCONVJ,
data = IQM_pro_data,
model = "pooling"))
summary(GLS6 <- pggls(gdpgrowth ~ inigdp + yr.sch.secM +
yr.sch.secF + llexpec + lfert + kg + ToT +
ki + l.icrgQoG,
data = IQM_pro_data,
model = "pooling"))
# # Fixed effects, individual effects
# summary(fixed_effects1 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "within"))
# summary(fixed_effects2 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONIII + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within"))
# summary(fixed_effects3 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONVJ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within"))
# summary(fixed_effects4 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + democ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within"))
# summary(fixed_effects5 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + llaw.order, data = IQM_pro_data, model = "within"))
# summary(fixed_effects6 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + l.icrgQoG, data = IQM_pro_data, model = "within"))
#
# # Fixed effects, twoways
# summary(fixed_effects1a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects2a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONIII + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects3a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONVJ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects4a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + democ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects5a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + llaw.order, data = IQM_pro_data, model = "within", effect = "twoways"))
# summary(fixed_effects6a <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + l.icrgQoG, data = IQM_pro_data, model = "within", effect = "twoways"))
#
# # Fixed effects, time effects
# summary(fixed_effects1b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects2b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONIII + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects3b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + POLCONVJ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects4b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + democ + lbmp + lfert + kg + ki + llexpec + ToT, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects5b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + llaw.order, data = IQM_pro_data, model = "within", effect = "time"))
# summary(fixed_effects6b <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + l.icrgQoG, data = IQM_pro_data, model = "within", effect = "time"))
# Random effects
# summary(random_effects1 <- plm(lgdp.growth ~ yr.sch.secF + yr.sch.secM + lbmp + lfert + kg + ki + llexpec + ToT + POLCONV, data = IQM_pro_data, model = "random"))
library(estout)
## @knitr analysis2
# eststo(fixed_effects1)
# eststo(fixed_effects2)
# eststo(fixed_effects3)
# eststo(fixed_effects4)
# eststo(fixed_effects5)
# eststo(fixed_effects6)
# esttab(label = "fe3", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from fixed effects estimation (individual effects)", caption.top=FALSE, table.pos="p", texfontsize="\\small")
# estclear()
# # Fixed effects, twoways
# eststo(fixed_effects1a)
# eststo(fixed_effects2a)
# eststo(fixed_effects3a)
# eststo(fixed_effects4a)
# eststo(fixed_effects5a)
# eststo(fixed_effects6a)
# esttab(label = "fe4", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from fixed effects estimation (individual and time effects)", caption.top=FALSE, table.pos="p", texfontsize="\\small")
# estclear()
# # FE, Time effects
# eststo(fixed_effects1b)
# eststo(fixed_effects2b)
# eststo(fixed_effects3b)
# eststo(fixed_effects4b)
# eststo(fixed_effects5b)
# eststo(fixed_effects6b)
# esttab(label = "fe5", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from fixed effects estimation (time effects)", caption.top=FALSE, table.pos="p", texfontsize="\\small")
# estclear()
# Pooled
eststo(pooled1)
eststo(pooled2)
eststo(pooled3)
eststo(pooled4)
eststo(pooled5)
eststo(pooled6)
esttab(label = "fe6", colnumber=TRUE, var.rename=NULL, table="sidewaystable", caption = "Estimation results from pooled regression", caption.top=FALSE, table.pos="p", texfontsize="\\small")
estclear()
# GLS
eststo(GLS1)
eststo(GLS2)
eststo(GLS3)
eststo(GLS4)
eststo(GLS5)
eststo(GLS6)
esttab(label = "GLS", colnumber=TRUE, var.rename=NULL,
table="sidewaystable",
caption = "Estimation results from GLS regression",
caption.top=FALSE, table.pos="p", texfontsize="\\small")
estclear()
GLS1
pooled1
## This demo shows how country level data can be accessed from
## the World Bank via their API and displayed with a Motion Chart.
## Inspired by Google's Public Data Explorer, see
## http://www.google.com/publicdata/home
##
## For the World Bank Data terms of use see:
## http://data.worldbank.org/summary-terms-of-use
##
## To run this demo an internet connection and Flash are required.
## This demo is part of the googleVis R package.
##
## Markus Gesmann, 24 September 2011
## Distributed under GPL 2 or later
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010',
value="value", per.page=12000){
require(RJSONIO)
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN',  date=years,
value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL',  date=years,
value="population")
## GDP per capita (current US$)
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',
date=years,
value="GDP.per.capita.Current.USD")
## Merge data sets
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
## Get country mappings
wbCountries <- getWorldBankCountries()
## Add regional information
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value",
"incomeLevel.value")],
by.x="country.id", by.y="iso2Code")
## Filter out the aggregates and country id column
subData <- subset(wbData, !region.value %in% "Aggregates" , select=
-country.id)
## Create a motion chart
M <- gvisMotionChart(subData, idvar="country.name", timevar="year",
options=list(width=700, height=600))
## Display the chart in your browser
plot(M)
install.packages("")
install.packages("RJSONIO")
## This demo shows how country level data can be accessed from
## the World Bank via their API and displayed with a Motion Chart.
## Inspired by Google's Public Data Explorer, see
## http://www.google.com/publicdata/home
##
## For the World Bank Data terms of use see:
## http://data.worldbank.org/summary-terms-of-use
##
## To run this demo an internet connection and Flash are required.
## This demo is part of the googleVis R package.
##
## Markus Gesmann, 24 September 2011
## Distributed under GPL 2 or later
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010',
value="value", per.page=12000){
require(RJSONIO)
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## This demo shows how country level data can be accessed from
## the World Bank via their API and displayed with a Motion Chart.
## Inspired by Google's Public Data Explorer, see
## http://www.google.com/publicdata/home
##
## For the World Bank Data terms of use see:
## http://data.worldbank.org/summary-terms-of-use
##
## To run this demo an internet connection and Flash are required.
## This demo is part of the googleVis R package.
##
## Markus Gesmann, 24 September 2011
## Distributed under GPL 2 or later
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010',
value="value", per.page=12000){
require(RJSONIO)
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN',  date=years,
value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL',  date=years,
value="population")
## GDP per capita (current US$)
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',
date=years,
value="GDP.per.capita.Current.USD")
## Merge data sets
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
## Get country mappings
wbCountries <- getWorldBankCountries()
## Add regional information
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value",
"incomeLevel.value")],
by.x="country.id", by.y="iso2Code")
## Filter out the aggregates and country id column
subData <- subset(wbData, !region.value %in% "Aggregates" , select=
-country.id)
## Create a motion chart
M <- gvisMotionChart(subData, idvar="country.name", timevar="year",
options=list(width=700, height=600))
## Display the chart in your browser
plot(M)
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
years
fertility.rate
head(fertility.rate)
